<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on My New Hugo Site</title>
    <link>https://the8loop.github.io/post/</link>
    <description>Recent content in Posts on My New Hugo Site</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 07 Jul 2022 14:42:27 -0500</lastBuildDate><atom:link href="https://the8loop.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>SQL Stored Procedures</title>
      <link>https://the8loop.github.io/post/sql-stored-procedures/</link>
      <pubDate>Thu, 07 Jul 2022 14:42:27 -0500</pubDate>
      
      <guid>https://the8loop.github.io/post/sql-stored-procedures/</guid>
      <description>SQL-Stored-Procedures The back-end for the Council of Yggdrasil website was written using .Net framework. When one uses such a framework to set up end points and communicate to a server, one likely uses Object-Relational Mapping (ORM). The .Net ORM used for Council of Yggdrasil is Entity Framework Core. An ORM allows one to make queries to a database using an object-oriented language versus, for example, SQL. While ORM comes with the advatange of writing in an OOP language and keeping query logic saved on the back-end level, complex queries are more efficiently done in the database side using stored procedures, an executable routine written in the database language (SQL).</description>
    </item>
    
    <item>
      <title>Dependency Injection</title>
      <link>https://the8loop.github.io/post/2020-06-17-dependency-injection/</link>
      <pubDate>Fri, 17 Jun 2022 00:00:00 +0000</pubDate>
      
      <guid>https://the8loop.github.io/post/2020-06-17-dependency-injection/</guid>
      <description>A Brief on Dependency Injection Dependency Injection, also known as Inversion of Control, is a design pattern used to loosely couple dependent objects. It makes the fifth principle of the SOLID design principles.
SOLID:
S : Single-responsiblity Principle O : Open-closed Principle L : Liskov Substitution Principle I : Interface Segregation Principle D : Dependency Inversion Principle Considering web development and the practice of dependency injection when handling objects making http requests, an example of the code simplification of dependency injection can be given by considering entities with mail services.</description>
    </item>
    
  </channel>
</rss>
